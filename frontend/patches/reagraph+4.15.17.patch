diff --git a/node_modules/reagraph/dist/index.js b/node_modules/reagraph/dist/index.js
index e46d6b7..409fc2c 100644
--- a/node_modules/reagraph/dist/index.js
+++ b/node_modules/reagraph/dist/index.js
@@ -2424,7 +2424,8 @@ const Node = ({
     label,
     subLabel,
     size: nodeSize = 7,
-    labelVisible = true
+    labelVisible = true,
+    labelFontSize
   } = node;
   const group = useRef(null);
   const [active, setActive] = useState(false);
@@ -2491,7 +2492,7 @@ const Node = ({
   );
   useCursor(isDragging, "grabbing");
   const combinedActiveState = shouldHighlight || isDragging;
-  const color = combinedActiveState ? theme.node.activeFill : node.fill || theme.node.fill;
+  const color = combinedActiveState ? node?.theme?.activeFill ?? theme.node.activeFill : node.fill || theme.node.fill;
   const { pointerOver, pointerOut } = useHoverIntent({
     disabled: disabled2 || isDragging,
     onPointerOver: () => {
@@ -2556,10 +2557,11 @@ const Node = ({
           {
             text: label,
             fontUrl: labelFontUrl,
+            fontSize: labelFontSize,
             opacity: selectionOpacity,
-            stroke: theme.node.label.stroke,
+            stroke: node?.theme?.label?.stroke ?? theme.node.label.stroke,
             active: isSelected || active || isDragging || isActive,
-            color: isSelected || active || isDragging || isActive ? theme.node.label.activeColor : theme.node.label.color
+            color: isSelected || active || isDragging || isActive ? node?.theme?.label?.activeColor ?? theme.node.label.activeColor : node?.theme?.label?.color ?? theme.node.label.color
           }
         ) }),
         subLabel && /* @__PURE__ */ jsx(a.group, { position: subLabelPosition, children: /* @__PURE__ */ jsx(
@@ -2583,6 +2585,7 @@ const Node = ({
       isSelected,
       label,
       labelFontUrl,
+      labelFontSize,
       labelPosition,
       labelVisible,
       selectionOpacity,
@@ -2646,7 +2649,7 @@ const Node = ({
             opacity: isSelected ? 0.5 : 0,
             size: nodeSize,
             animated,
-            color: isSelected || active ? theme.ring.activeFill : theme.ring.fill
+            color: isSelected || active ? node?.theme?.ring?.activeFill ?? theme.ring.activeFill : node?.theme?.ring?.fill ?? theme.ring.fill
           }
         ),
         menuComponent,
@@ -2980,7 +2983,7 @@ const Edge$1 = ({
       Arrow,
       {
         animated,
-        color: isSelected || active || isActive ? theme.arrow.activeFill : theme.arrow.fill,
+        color: isSelected || active || isActive ? edge?.theme?.arrow?.activeFill ?? theme.arrow.activeFill :edge?.theme?.arrow?.fill ?? theme.arrow.fill,
         length: arrowLength,
         opacity: selectionOpacity,
         position: arrowPosition,
@@ -3021,7 +3024,7 @@ const Edge$1 = ({
         ellipsis: 15,
         fontUrl: labelFontUrl,
         stroke: theme.edge.label.stroke,
-        color: isSelected || active || isActive ? theme.edge.label.activeColor : theme.edge.label.color,
+        color: isSelected || active || isActive ? theme?.edge?.label?.activeColor : theme?.edge?.label?.color,
         opacity: selectionOpacity,
         fontSize: theme.edge.label.fontSize
       }
@@ -3052,7 +3055,7 @@ const Edge$1 = ({
       {
         curveOffset,
         animated,
-        color: isSelected || active || isActive ? theme.edge.activeFill : theme.edge.fill,
+        color: isSelected || active || isActive ? edge?.theme?.activeFill ?? theme.edge.activeFill : edge?.theme?.fill ?? theme.edge.fill,
         curve,
         curved,
         id,
diff --git a/node_modules/reagraph/dist/types.d.ts b/node_modules/reagraph/dist/types.d.ts
index 63ef2e6..8e7cd24 100644
--- a/node_modules/reagraph/dist/types.d.ts
+++ b/node_modules/reagraph/dist/types.d.ts
@@ -1,205 +1,250 @@
 import { ReactNode } from 'react';
 import { ColorRepresentation } from 'three';
 export interface GraphElementBaseAttributes<T = any> {
-    /**
-     * ID of the element.
-     */
-    id: string;
-    /**
-     * Extra data associated with the element.
-     */
-    data?: T;
-    /**
-     * Label for the element.
-     */
-    label?: string;
-    /**
-     * SubLabel for the element.
-     */
-    subLabel?: string;
-    /**
-     * Size of the element.
-     */
-    size?: number;
-    /**
-     * Force label visible or not.
-     */
-    labelVisible?: boolean;
+  /**
+   * ID of the element.
+   */
+  id: string;
+  /**
+   * Extra data associated with the element.
+   */
+  data?: T;
+  /**
+   * Label for the element.
+   */
+  label?: string;
+  /**
+   * SubLabel for the element.
+   */
+  subLabel?: string;
+  /**
+   * Size of the element.
+   */
+  size?: number;
+  /**
+   * Force label visible or not.
+   */
+  labelVisible?: boolean;
 }
 export interface GraphNode extends GraphElementBaseAttributes {
-    /**
-     * ID of the parent node.
-     */
-    parents?: string[];
-    /**
-     * Icon URL for the node.
-     */
-    icon?: string;
-    /**
-     * Fill color for the node.
-     */
+  /**
+   * ID of the parent node.
+   */
+  parents?: string[];
+  /**
+   * Icon URL for the node.
+   */
+  icon?: string;
+  /**
+   * Fill color for the node.
+   */
+  fill?: string;
+
+  /**
+   * Font size of the node label.
+   */
+  labelFontSize?: number;
+
+  theme?: {
     fill?: string;
+    activeFill?: ColorRepresentation;
+    opacity?: number;
+    selectedOpacity?: number;
+    inactiveOpacity?: number;
+    label?: {
+      color?: ColorRepresentation;
+      stroke?: ColorRepresentation;
+      activeColor?: ColorRepresentation;
+    };
+    subLabel?: {
+      color?: ColorRepresentation;
+      stroke?: ColorRepresentation;
+      activeColor?: ColorRepresentation;
+    };
+    ring?: {
+      fill?: ColorRepresentation;
+      activeFill?: ColorRepresentation;
+    };
+  };
 }
 export interface GraphEdge extends GraphElementBaseAttributes {
-    /**
-     * Source ID of the node.
-     */
-    source: string;
-    /**
-     * Target ID of the node.
-     */
-    target: string;
+  /**
+   * Source ID of the node.
+   */
+  source: string;
+  /**
+   * Target ID of the node.
+   */
+  target: string;
+
+  theme?: {
+    fill?: ColorRepresentation;
+    activeFill?: ColorRepresentation;
+    opacity?: number;
+    selectedOpacity?: number;
+    inactiveOpacity?: number;
+    label?: {
+      color?: ColorRepresentation;
+      stroke?: ColorRepresentation;
+      activeColor?: ColorRepresentation;
+    };
+    arrow?: {
+      fill?: ColorRepresentation;
+      activeFill?: ColorRepresentation;
+    };
+  };
 }
 export interface Graph {
-    /**
-     * Public nodes of the graph.
-     */
-    nodes: GraphNode[];
-    /**
-     * Public edges of the graph.
-     */
-    edges: GraphEdge[];
+  /**
+   * Public nodes of the graph.
+   */
+  nodes: GraphNode[];
+  /**
+   * Public edges of the graph.
+   */
+  edges: GraphEdge[];
 }
 export interface InternalGraphLink {
-    /**
-     * Extra data associated with the element.
-     */
-    data: any;
-    /**
-     * ID of the edge.
-     */
-    id: string;
-    /**
-     * ID of the from node.
-     */
-    source: string;
-    /**
-     * ID of the to node.
-     */
-    target: string;
+  /**
+   * Extra data associated with the element.
+   */
+  data: any;
+  /**
+   * ID of the edge.
+   */
+  id: string;
+  /**
+   * ID of the from node.
+   */
+  source: string;
+  /**
+   * ID of the to node.
+   */
+  target: string;
 }
-export interface InternalGraphEdge extends Omit<GraphEdge, 'source' | 'target'> {
-    /**
-     * ID of the from node.
-     */
-    source: string;
-    /**
-     * ID of the to node.
-     */
-    target: string;
+export interface InternalGraphEdge
+  extends Omit<GraphEdge, 'source' | 'target'> {
+  /**
+   * ID of the from node.
+   */
+  source: string;
+  /**
+   * ID of the to node.
+   */
+  target: string;
 }
 export interface InternalGraphPosition extends InternalVector3 {
-    /**
-     * ID of the element.
-     */
-    id: string;
-    /**
-     * Extra data associated with the element.
-     */
-    data: any;
-    /**
-     * Link relationships of the element.
-     */
-    links: InternalGraphLink[];
-    /**
-     * Index of the element.
-     */
-    index: number;
-    /**
-     * VX position of the element.
-     */
-    vx: number;
-    /**
-     * VY position of the element.
-     */
-    vy: number;
+  /**
+   * ID of the element.
+   */
+  id: string;
+  /**
+   * Extra data associated with the element.
+   */
+  data: any;
+  /**
+   * Link relationships of the element.
+   */
+  links: InternalGraphLink[];
+  /**
+   * Index of the element.
+   */
+  index: number;
+  /**
+   * VX position of the element.
+   */
+  vx: number;
+  /**
+   * VY position of the element.
+   */
+  vy: number;
 }
 export interface InternalVector3 {
-    /**
-     * X position of the element.
-     */
-    x: number;
-    /**
-     * Y position of the element.
-     */
-    y: number;
-    /**
-     * Z position of the element.
-     */
-    z: number;
+  /**
+   * X position of the element.
+   */
+  x: number;
+  /**
+   * Y position of the element.
+   */
+  y: number;
+  /**
+   * Z position of the element.
+   */
+  z: number;
 }
 export interface InternalGraphNode extends GraphNode {
-    /**
-     * Position of the node set by dragging or layout.
-     */
-    position: InternalGraphPosition;
-    /**
-     * FX position of the element. This is used for the force graph layout.
-     */
-    fx?: number;
-    /**
-     * FY position of the element. This is used for the force graph layout.
-     */
-    fy?: number;
-    /**
-     * FZ position of the element. This is used for the force graph layout.
-     */
-    fz?: number;
+  /**
+   * Position of the node set by dragging or layout.
+   */
+  position: InternalGraphPosition;
+  /**
+   * FX position of the element. This is used for the force graph layout.
+   */
+  fx?: number;
+  /**
+   * FY position of the element. This is used for the force graph layout.
+   */
+  fy?: number;
+  /**
+   * FZ position of the element. This is used for the force graph layout.
+   */
+  fz?: number;
 }
 export interface CollapseProps {
-    /**
-     * Whether a node can be collapsed based on if it has any outbound edges
-     */
-    canCollapse: boolean;
-    /**
-     * Whether a node has been collapsed via a context menu action
-     */
-    isCollapsed: boolean;
+  /**
+   * Whether a node can be collapsed based on if it has any outbound edges
+   */
+  canCollapse: boolean;
+  /**
+   * Whether a node has been collapsed via a context menu action
+   */
+  isCollapsed: boolean;
 }
 export interface NodeContextMenuProps extends CollapseProps {
-    /**
-     * Callback to hide a node's ancestors which are not accessible via another node's edges
-     */
-    onCollapse: () => void;
+  /**
+   * Callback to hide a node's ancestors which are not accessible via another node's edges
+   */
+  onCollapse: () => void;
 }
 export interface ContextMenuEvent extends NodeContextMenuProps {
-    /**
-     * Data the node was invoked on.
-     */
-    data: InternalGraphNode | InternalGraphEdge;
-    /**
-     * Close event callback.
-     */
-    onClose: () => void;
+  /**
+   * Data the node was invoked on.
+   */
+  data: InternalGraphNode | InternalGraphEdge;
+  /**
+   * Close event callback.
+   */
+  onClose: () => void;
 }
 export interface NodeRendererProps {
-    /**
-     * Color of the node. Handles selected/etc.
-     */
-    color: ColorRepresentation;
-    /**
-     * The internal node model.
-     */
-    node: InternalGraphNode;
-    /**
-     * Size of the node.
-     */
-    size: number;
-    /**
-     * Whether the node is active or not.
-     */
-    active: boolean;
-    /**
-     * Opacity of the node. Mainly used for selection.
-     */
-    opacity: number;
-    /**
-     * Animation of the node.
-     */
-    animated: boolean;
-    /**
-     * ID of the node.
-     */
-    id: string;
+  /**
+   * Color of the node. Handles selected/etc.
+   */
+  color: ColorRepresentation;
+  /**
+   * The internal node model.
+   */
+  node: InternalGraphNode;
+  /**
+   * Size of the node.
+   */
+  size: number;
+  /**
+   * Whether the node is active or not.
+   */
+  active: boolean;
+  /**
+   * Opacity of the node. Mainly used for selection.
+   */
+  opacity: number;
+  /**
+   * Animation of the node.
+   */
+  animated: boolean;
+  /**
+   * ID of the node.
+   */
+  id: string;
 }
 export type NodeRenderer = (args: NodeRendererProps) => ReactNode;
